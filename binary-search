#find the num in the  ordered list1

from typing import List
def exists(sorted_list: List[int], target: int) -> bool:
    if not sorted_list:
        return False
    
    left, right = 0, len(sorted_list) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if target == sorted_list[mid]:
            return True
        if target > sorted_list[mid]:
            left = mid + 1
        else:
            right = mid - 1
    
    return False
print(exists([1,3,4,5,6,7,8,11,455], 9))

#有序数组中找>=num的最左位置 index
def fn(list1, num):
    ans = -1
    if not list1:
        return ans
    l = 0
    r = len(list1) - 1
    while l <= r:
        m = (l + r) // 2
        if list1[m] >= num:
            ans = m
            r = m - 1
        else:
            l = m + 1
    return ans

print(fn([1, 3, 4, 5, 6, 7, 8, 11, 455], 9))


#https://leetcode.cn/problems/find-peak-element/
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        n=len(nums)
        ans=-1
        if not nums:
            return ans
        if len(nums)==1:
            return 0
        if nums[0]> nums[1]:
            return 0
        if nums[n-2]<nums[n-1]:
            return n-1
        l=1
        r=n-2
        
        while l<=r:
            m=(l+r) //2
            if nums[m]<nums[m+1]:
                l=m+1            
            elif nums[m-1]>nums[m]:
                r=m-1
            else:                 
                ans=m
                break;
        return ans




